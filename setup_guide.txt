# Setup Your Project for Success - Documentation Portal

A comprehensive Jekyll-based documentation portal for the "Setup Your Project for Success" toolkit, featuring Festa Design Studio branding and optimized for GitHub Pages deployment.

## 🎯 Project Overview

This documentation portal provides:
- **8 structured lessons** on project design for nonprofits and social enterprises
- **Downloadable templates and tools** for immediate application
- **Video integration** with Vimeo embeds
- **Searchable navigation** with just-the-docs theme
- **Festa Design Studio branding** with custom colors and typography
- **SEO optimization** for maximum discoverability

## 🚀 Quick Start

### Prerequisites
- GitHub account
- Basic familiarity with Markdown
- Domain registrar access (for custom domain)

### 1. Repository Setup

```bash
# Create new repository
git clone https://github.com/your-username/setup-project-success.git
cd setup-project-success

# Copy all files from this guide to your repository
# (Use the file structure shown below)
```

### 2. Repository Structure

```
setup-project-success/
├── _config.yml                 # Site configuration
├── Gemfile                     # Ruby dependencies
├── index.md                    # Homepage
├── .github/
│   └── workflows/
│       └── pages.yml           # GitHub Actions deployment
├── _sass/
│   └── color_schemes/
│       └── festa.scss          # Custom Festa colors
├── _layouts/                   # Custom layouts (if needed)
├── _includes/                  # Reusable components
├── _lessons/                   # Lesson content
│   ├── index.md
│   ├── problem-tree-analysis.md
│   ├── stakeholder-mapping.md
│   ├── affinity-diagram.md
│   ├── theory-of-change.md
│   ├── logical-framework.md
│   ├── activity-design.md
│   ├── proposal-writing.md
│   └── budget-estimation.md
├── _resources/                 # Resource downloads and guides
│   ├── index.md
│   ├── templates/
│   ├── case-studies/
│   └── quick-guides/
├── assets/
│   ├── images/                 # Logos, diagrams, screenshots
│   └── downloads/              # PDF templates and tools
└── CNAME                       # Custom domain configuration
```

### 3. Content Creation

#### Create Lesson Files
Each lesson should follow this front matter format:

```yaml
---
layout: default
title: "Lesson Title"
parent: Lessons
nav_order: 2
description: "Lesson description for SEO"
video_url: "https://vimeo.com/video-id"
duration: "5 minutes"
downloads:
  - title: "Template Name"
    url: "/assets/downloads/template.pdf"
    type: "PDF Template"
tags: ["analysis", "tools"]
---
```

#### Add Video Embeds
Use this Vimeo embed code in lessons:

```html
<div class="video-embed">
<div style="padding:56.25% 0 0 0;position:relative;">
<iframe src="https://player.vimeo.com/video/YOUR-VIDEO-ID?badge=0&amp;autopause=0&player_id=0&app_id=58479" 
        frameborder="0" 
        allow="autoplay; fullscreen; picture-in-picture" 
        allowfullscreen 
        style="position:absolute;top:0;left:0;width:100%;height:100%;"
        title="Lesson Title">
</iframe>
</div>
<script src="https://player.vimeo.com/api/player.js"></script>
</div>
```

#### Upload Resources
1. Create PDF templates using provided examples
2. Upload to `/assets/downloads/` directory
3. Reference in lesson front matter and resource pages

### 4. GitHub Pages Configuration

#### Enable GitHub Pages
1. Go to repository Settings
2. Navigate to "Pages" section
3. Select "Source: GitHub Actions"
4. The workflow will automatically deploy on push to main

#### Configure Custom Domain
1. Create CNAME file in repository root:
   ```
   toolkit.festa.design
   ```

2. Configure DNS with your domain registrar:
   ```
   Type: CNAME
   Name: toolkit (or your subdomain)
   Value: your-username.github.io
   ```

3. Wait for DNS propagation (up to 24 hours)
4. Enable "Enforce HTTPS" in GitHub Pages settings

### 5. Local Development

#### Setup Local Environment
```bash
# Install Ruby (if not already installed)
# On macOS with Homebrew:
brew install ruby

# Install bundler
gem install bundler

# Install dependencies
bundle install

# Serve site locally
bundle exec jekyll serve

# View at http://localhost:4000
```

#### Development Workflow
```bash
# Create new branch for changes
git checkout -b feature/new-lesson

# Make changes and test locally
bundle exec jekyll serve

# Commit and push
git add .
git commit -m "Add new lesson: Activity Design"
git push origin feature/new-lesson

# Create pull request on GitHub
# Merge to main triggers automatic deployment
```

## 🎨 Customization Guide

### Brand Colors
Festa's color system is defined in `_sass/color_schemes/festa.scss`:

```scss
// Primary colors
$chicken-comb: #e12729;     // Red
$apocalyptic-orange: #f37324; // Orange
$pepper-green: #007f4e;      // Green
$pot-of-gold: #f8cc1b;       // Yellow
$leaf: #72b043;              // Light green

// Neutrals
$white-smoke: #f6f6f6;       // Light gray
$the-end: #2a2a2a;           // Dark gray
```

### Typography
Uses Inter font family with fluid type scaling defined in `_config.yml`. Typography follows Festa's established hierarchy.

### Custom Components
Pre-built components available:

```html
<!-- Feature cards -->
<div class="feature-card">Content</div>

<!-- Lesson cards -->
<div class="lesson-card">Content</div>

<!-- Download sections -->
<div class="download-section">Content</div>

<!-- Video embeds -->
<div class="video-embed">Content</div>
```

## 📊 SEO Optimization

### Meta Tags
Each page includes:
- Title optimization with lesson names
- Description meta tags for search results
- Open Graph tags for social sharing
- Structured data for rich snippets

### URL Structure
Clean, semantic URLs:
- `/lessons/problem-tree-analysis/`
- `/resources/templates/`
- `/resources/case-studies/youth-employment/`

### Sitemap and Feeds
Automatically generated:
- XML sitemap at `/sitemap.xml`
- RSS feed at `/feed.xml`
- Search functionality via just-the-docs

## 🔍 Analytics Setup

### Google Analytics
1. Get tracking ID from Google Analytics
2. Add to `_config.yml`:
   ```yaml
   ga_tracking: G-XXXXXXXXXX
   ```

### Alternative Analytics
For privacy-focused analytics, consider:
- Plausible Analytics
- Fathom Analytics
- Simple Analytics

## 🛠️ Maintenance

### Regular Updates
- Review and update lesson content quarterly
- Add new templates based on user feedback
- Update case studies with fresh examples
- Monitor and fix broken links

### Performance Monitoring
- Use Google PageSpeed Insights
- Monitor Core Web Vitals
- Optimize images for web delivery
- Minify CSS/JS through Jekyll

### Backup Strategy
- Repository automatically backed up on GitHub
- Consider additional backup of assets folder
- Document any custom configurations

## 🚨 Troubleshooting

### Common Issues

**Build Failures:**
```bash
# Check Ruby version compatibility
ruby --version

# Update gems
bundle update

# Clear cache
bundle exec jekyll clean
```

**Styling Issues:**
- Verify `festa.scss` is in correct location
- Check for SCSS syntax errors
- Clear browser cache

**Custom Domain Issues:**
- Verify CNAME file content
- Check DNS configuration
- Wait for DNS propagation
- Ensure HTTPS is enabled

### Support Resources
- [Jekyll Documentation](https://jekyllrb.com/docs/)
- [just-the-docs Theme](https://just-the-docs.github.io/just-the-docs/)
- [GitHub Pages Documentation](https://docs.github.com/en/pages)

## 📈 Analytics and Success Metrics

### Key Performance Indicators
Track these metrics based on the M&E plan:

**Engagement Metrics:**
- Page views per lesson
- Time spent on page
- Download rates for templates
- Video completion rates

**User Behavior:**
- Most popular lessons
- Common user paths through content
- Search queries within site
- Referral sources

**Impact Indicators:**
- Subscriber sign-ups
- Contact form submissions
- Social media shares
- Partner organization adoption

### Implementation
Use Google Analytics 4 with custom events:
```javascript
// Template download tracking
gtag('event', 'download', {
  'file_name': 'problem-tree-worksheet.pdf',
  'lesson': 'problem-tree-analysis'
});

// Video engagement tracking
gtag('event', 'video_progress', {
  'video_title': 'Problem Tree Analysis',
  'progress': '50%'
});
```

## 🤝 Contributing

### Content Guidelines
- Follow established lesson structure
- Maintain sector-agnostic approach
- Include practical examples and templates
- Test all downloads and links

### Style Guidelines
- Use Festa color scheme consistently
- Maintain accessibility standards (WCAG 2.1 AA)
- Optimize images for web delivery
- Follow responsive design principles

### Submission Process
1. Fork repository
2. Create feature branch
3. Make changes with proper testing
4. Submit pull request with description
5. Review and merge process

## 📄 License

This documentation portal is licensed under Creative Commons Attribution 4.0. Templates and resources may be used, adapted, and shared with appropriate attribution to Festa Design Studio.

---

## 🎯 Next Steps

1. **Setup Repository**: Create GitHub repository with provided structure
2. **Configure Domain**: Set up custom domain DNS
3. **Create Content**: Develop lesson pages using templates
4. **Upload Assets**: Add videos, images, and downloadable resources
5. **Test Deployment**: Verify site builds and deploys correctly
6. **Launch**: Announce and promote the documentation portal

**Questions or Need Support?**
Contact Festa Design Studio at hello@festa.design or create an issue in the repository.

---

*Built with ❤️ by Festa Design Studio to democratize access to high-quality project design tools for purpose-driven organizations.*